// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace SertifikaKontrol.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<int?>("ApplyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BasvuruTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Belgeler")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CertificateID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationID");

                    b.HasIndex("ApplyID");

                    b.HasIndex("CertificateID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Entities.Apply", b =>
                {
                    b.Property<int>("ApplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplyID"));

                    b.Property<DateTime>("BasvuruTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Belgeler")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CertificateID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("OnayDurumu")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OnayTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OnaylayanYoneticiID")
                        .HasColumnType("int");

                    b.Property<string>("RedSebebi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReddedenYoneticiID")
                        .HasColumnType("int");

                    b.HasKey("ApplyID");

                    b.HasIndex("CertificateID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Applies");
                });

            modelBuilder.Entity("Entities.Certificate", b =>
                {
                    b.Property<int>("SertifikaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SertifikaID"));

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("SertifikaAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SertifikaNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SertifikaSaglayici")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SertifikaID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Entities.ESignatureCertificate", b =>
                {
                    b.Property<int>("EimzaSertifikaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EimzaSertifikaID"));

                    b.Property<int?>("CertificateID")
                        .HasColumnType("int");

                    b.Property<string>("EimzaDosyaYolu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SertifikaNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SertifikaSahibi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EimzaSertifikaID");

                    b.HasIndex("CertificateID");

                    b.ToTable("ESignatureCertificates");
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departman")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DogumTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IseGirisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pozisyon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Entities.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerID"));

                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Entities.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<int?>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int?>("ApplyID")
                        .HasColumnType("int");

                    b.Property<string>("BildirimMetni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("ApplyID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.NotificationPreference", b =>
                {
                    b.Property<int>("NotificationPreferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationPreferenceID"));

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("EpostaBildirim")
                        .HasColumnType("bit");

                    b.Property<bool>("SMSBildirim")
                        .HasColumnType("bit");

                    b.HasKey("NotificationPreferenceID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("Entities.NotificationRecord", b =>
                {
                    b.Property<int>("NotificationRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationRecordID"));

                    b.Property<DateTime>("GonderilenTarih")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NotificationID")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationTypeID")
                        .HasColumnType("int");

                    b.HasKey("NotificationRecordID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("NotificationTypeID");

                    b.ToTable("NotificationRecords");
                });

            modelBuilder.Entity("Entities.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeID"));

                    b.Property<string>("TipAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationTypeID");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Entities.Application", b =>
                {
                    b.HasOne("Entities.Apply", "Apply")
                        .WithMany()
                        .HasForeignKey("ApplyID");

                    b.HasOne("Entities.Certificate", "Certificate")
                        .WithMany("Applications")
                        .HasForeignKey("CertificateID");

                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("Applications")
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Apply");

                    b.Navigation("Certificate");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.Apply", b =>
                {
                    b.HasOne("Entities.Certificate", "Certificate")
                        .WithMany("Applys")
                        .HasForeignKey("CertificateID");

                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("Applies")
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Certificate");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.Certificate", b =>
                {
                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.ESignatureCertificate", b =>
                {
                    b.HasOne("Entities.Certificate", "Certificate")
                        .WithMany("ESignatureCertificates")
                        .HasForeignKey("CertificateID");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Entities.Notification", b =>
                {
                    b.HasOne("Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplicationID");

                    b.HasOne("Entities.Apply", "Apply")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplyID");

                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Application");

                    b.Navigation("Apply");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.NotificationPreference", b =>
                {
                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.NotificationRecord", b =>
                {
                    b.HasOne("Entities.Notification", "Notification")
                        .WithMany("NotificationRecords")
                        .HasForeignKey("NotificationID");

                    b.HasOne("Entities.NotificationType", "NotificationType")
                        .WithMany("NotificationRecords")
                        .HasForeignKey("NotificationTypeID");

                    b.Navigation("Notification");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Entities.Application", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Entities.Apply", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Entities.Certificate", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Applys");

                    b.Navigation("ESignatureCertificates");
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Applies");

                    b.Navigation("Certificates");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Entities.Notification", b =>
                {
                    b.Navigation("NotificationRecords");
                });

            modelBuilder.Entity("Entities.NotificationType", b =>
                {
                    b.Navigation("NotificationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
